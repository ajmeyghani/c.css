/*
@styleguide
@title flexible-grid

### Summary

Generic flexible grid useful for creating auto-resizable grid layouts.

### Example

```html
<div class="flexible-grid">
  <div class="box"></div>
  <div class="box"></div>
  <div class="box"></div>
</div>
```

<div class="flexible-grid">
  <div class="box"></div>
  <div class="box"></div>
  <div class="box"></div>
</div>

### custom-properties:

- `--cell-min-width`: default 17rem, defines the min width for each grid cell
- `--row-height`: default 5rem, defines the height of each cell
- `--grow-type`: default auto-fit, defines how the cells should stretch
   to fill extra space.
*/
.flexible-grid {
  --cell-min-width: 17rem;
  --row-height: 5rem;
  --grow-type: auto-fit;
  display: grid;
  grid-template-columns: repeat(
    var(--grow-type),
    minmax(var(--cell-min-width), 1fr)
  );
  grid-gap: var(--m-space);
  grid-auto-rows: var(--row-height);
  align-items: stretch;
}

.flexible-grid > * {
  width: 100%;
}

/**
 * Vertical/horizontal centering:
 *
 * - `center-v`: vertical center children elements;
 * - `center-h`: horizontally center child elements;
 *
 * Example:
 *
 * The example below vertically centers all the children
 * elements.
 *
 * ```html
 *<div class="center-v">
 *  <span>item</span>
 *  <span>item2</span>
 *</div>
 * ```
 */

[class^="center" i] {
  display: flex;
}

.center-v {
  align-items: center;
}

.center-h {
  justify-content: center;
}

/**
 * Set margin bottom to all children elements of a container
 * to space them vertically. For example useful for adding a
 * margin bottom to all paragraphs inside a container.
 */

[class^="space-v" i] {
  --space-v__value: var(--default-space);
}

[class^="space-v" i] > *:not(:last-child) {
  margin-bottom: var(--space-v__value);
}

[class^="space-v" i][class*="md" i] {
  --space-v__value: var(--sp4);
}

/**
 * Same as space-v but for equally spacing children elements
 * horizontally.
 *
 * - base class: `space-h`
 *
 * - modifiers:
 *
 *    - `md`
 *    - `wrap`
 *
 * - possible combinations:
 *
 * - `space-h`: spaces elements horizontally with equal spaces between;
 * - `space-h--md`: same as above but with larger margin value;
 * - `space-h--wrap`: wraps the elements;
 * - `space-h--md-wrap`: combines the two above;
 *
 * Note that the `--` is optional, you can do `space-h-md-wrap`, but it
 * is nicer to stick to BEM modifier convention and use `--`.
 */

[class^="space-h" i] {
  display: flex;
  flex-direction: row;
  --space-h__value: var(--default-space);
}

[class^="space-h" i] > *:not(:last-child) {
  margin-right: var(--space-h__value);
}

[class^="space-h" i][class*="md" i] {
  --space-h__value: var(--sp4);
}

[class^="space-h" i][class*="wrap"] {
  flex-wrap: wrap;
}

[class^="space-h" i][class*="wrap"] > *:not(:last-child) {
  flex-wrap: wrap;
  margin-bottom: var(--space-h__value);
}
